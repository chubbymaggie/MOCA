#!/bin/bash

usage()
{
    echo "Usage : $name [options] -c \"command\""
    echo "Loads $name kernel module and configure it to monitor command, then
    execute the command given by the user"
    echo "-c cmd            The command to be executed"
    echo "Options:"
    echo "-h                Display this help and exit"
    echo "-a \"args\"       The arguments for command"
    echo "-d dir            Path to the MemMap dir default $install_dir"
    echo "-f file           Log cmd into file"
    echo "-l file           Log module output into file"
    echo "The following parameters allows you to do fine tuning on the module.
          By default you shouldn't need to use them.
            + If you encounter performance issues, you can increase the wakeup
            interval, the priority (reduce the system noise) or the hashmap
            numbit parameter.
            + If $name tells you that a part of the trace have been dropped
            because there was not enought space to sotre it, you can increase
            the number of chunks, the chunksize or reduce the wakeup interval.
          Please note that as memory is quite restricted in the kernel, it
          might be a better idea to play on the wakeup interval the priority
          than on the storage related parameters."
    echo "-w ms             Set the wakeup interval for MemMap to interval ms,
                            Default: $interval."
    echo "-p prio           Schedtool priority for the kernel module, the
                            program priority will be prio-1. You can increase
                            this parameter to reduce the system noise.
                            Default: $prio"
    echo "-b numbits        Set the number of bits used for the chunk
                            hashmaps. The map size is 2^numbits. the higher
                            numbits is, the less collision you should have.
                            Default: 14"
    echo "-S ChunkSize      Set the number of adress that can be stored in one
                            chunk. You can also use the -w toggle to reduce to
                            wakeup interval, and therefore the number of
                            adresses needed per chunks.
                            Default: 2*2^14."
    echo "-C nbChunks       Set the number of chunks to keep in memory.
                            Default: 20."
}

which schedtool > /dev/null
if [ $? -ne 0 ]
then
    echo "$0 requires the schedtool which is not find in your PATH"
    echo "Please install schedtool or update your PATH"
    exit 1
fi

if [ $(whoami) != "root"  ]
then
    echo "$0 must be run as root"
    exit 1
fi

prio=1 #$(schedtool -r | grep FIFO | sed -e 's/.*prio_max \([0-9]*\)/\1/')
install_dir="~/install/MemMap"
kernLogFile="MemMap"
procdir="/proc/MemMap"
log_thread_interval=.5
name=$(basename $0)

while getopts "c:ha:d:f:l:w:p:b:S:C:" opt
do
    case $opt in
        c)
            cmd="$OPTARG"
            ;;
        h)
            usage
            exit 0
            ;;
        a)
            args="$OPTARG"
            ;;
        d)
            install_dir="$OPTARG"
            ;;
        f)
            logfile="$OPTARG"
            ;;
        l)
            kernLogFile="$OPTARG"
            ;;
        w)
            memmap_interval="MemMap_wakeupInterval=$OPTARG"
            ;;
        p)
            prio=$OPTARG
            ;;
        b)
            memmap_bits="MemMap_taskDataHashBits=$OPTARG"
            ;;
        S)
            memmap_factor="MemMap_taskDataChunkSize=$OPTARG"
            ;;
        C)
            memmap_chunks="MemMap_nbChunks=$OPTARG"
            ;;
        *)
            usage
            exit 1
            ;;
    esac
done

if [ -z "$cmd" ]
then
    echo "A command is required"
    usage
    exit 1
fi

# Wait for the kernel module to start
child()
{
    #echo "Child $BASHPID waiting for a signal from my parent"
    kill -s SIGSTOP $BASHPID
    #echo "Child $BASHPID awake"
    if [ -z "$logfile" ]
    then
        $cmd $args
    else
        $cmd $args > $logfile 2> $logfile.err
    fi
    ret=$?
    echo "$cmd ended code $ret"
    exit $ret
}
log()
{
    while test -e $procdir
    do
        for f in $(\ls $procdir)
        do
            cat $procdir/$f >> $kernLogFile-$f.log
        done
        sleep $log_thread_interval
    done
}

abort_on_error()
{
    if [ $1 -ne 0 ]
    then
        kill -9 $pid
        echo "Fatal error: $2"
        echo "aborting"
        exit 1
    fi
}

let user_prio=$(( $prio - 1 ))
child &
pid=$!
schedtool -F -p $prio $$
schedtool -F -p $user_prio $pid
cd $install_dir/src/module/
make clean && make
abort_on_error $? "make fail"
# make install
# abort_on_error $? "Install fail"
insmod memmap.ko MemMap_mainPid=$pid MemMap_schedulerPriority=$prio \
    $memmap_interval $memmap_bits $memmap_factor $memmap_chunks
abort_on_error $? "unable to load module"
cd -
log &
logpid=$!
schedtool -F -p $prio $logpid
kill -s SIGCONT $pid
#echo "Parent $BASHPID waiting for child $pid in script $$"
wait $pid
rmmod memmap
