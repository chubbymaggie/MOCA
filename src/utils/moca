#!/bin/bash

# Copyright (C) 2015  Beniamine, David <David@Beniamine.net>
# Author: Beniamine, David <David@Beniamine.net>
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

usage()
{
    echo "Usage : $name [options] -c \"command\""
    echo "Loads $name kernel module and configure it to monitor the user given
    command."
    echo "  -c cmd            The command to be monitored."
    echo "Options:"
    echo "  -h                Display this help and exit."
    echo "  -a \"args\"         The arguments for command."
    echo "  -d dir            Path to the Moca dir. Default: $install_dir"
    echo "  -f file           Log cmd into file. Default: Moca-cmd.log"
    echo "  -l file           Log module output into file. Default: cmd-date"
    echo "  -n                Do not compile the module"
    echo "  -D dirname        Set the output directory MUST be an absolute path.
    Default: $logdir"
    echo "  -G                Do not generate framesoc's files"
    echo "  -P                Do not use pin (needed for structure name
                              detection)"
    echo -e "\n  The following parameters allows you to do fine tuning on the
    module. By default you shouldn't need to use them.
    + If you encounter performance issues, you can increase the wakeup
    interval, the priority (reduce the system noise) or the hashmap numbit
    parameter.
    + If $name tells you that a part of the trace have been dropped because
    there was not enought space to sotre it, you can increase the number of
    chunks, the chunksize or reduce the wakeup interval.
    Please note that, as memory is quite restricted in the kernel, it might be a
    better idea to play on the wakeup interval the priority than on the storage
    related parameters.\n"
    echo "  -w ms             Set the wakeup interval for Moca to interval ms,
    Default: 40ms"
    echo "  -L s              Set the logging daemon wakeup interval, default
    .5s"
    echo "  -p prio           Schedtool priority for the kernel module, the program
    priority will be prio-1. You can increase this parameter
    to reduce the system noise. Default: $prio"
    echo "  -b numbits        Set the number of bits used for the chunk hashmaps.
    The map size is 2^numbits. the higher numbits is, the
    less collision you should have. Default: 14"
    echo "  -S ChunkSize      Set the number of adress that can be stored in one
    chunk. You can also reduce the wakeup interval, and
    therefore the number of adresses needed per chunks.
    Default: 2*2^14."
    echo "  -C nbChunks       Set the number of chunks kept in memory. Default: 20."
    echo "  -F                Disable false page faults. If you set this flag,
    a lot of memory event will be missed, you really shouldn't use it ..."
    echo "  -H                Use hack false page faults hack, this can
    reduce MOCA's overhead, however you must be sure that your application
    won't swap or it will crash !"
}

timer()
{
    local fmt="+%H h %M min %S.%3N sec"
    if [ -z "$1" ]
    then
        date +%s.%3N
    else
        date -u -d "0 $(date +%s.%3N) sec - $1 sec" "$fmt"
    fi

}

initime=$(timer)
install_dir="$(dirname $0)/../.."
pintooldir=$install_dir/src/pintool
pin=true
kernLogFile="Moca"
procdir="/proc/Moca"
log_thread_interval=.4
Moca_log="Moca-output.log"
name=$(basename $0)
compi=true
framesoc=true

while getopts "c:ha:d:f:l:w:p:b:S:C:D:L:nHFGP" opt
do
    case $opt in
        c)
            cmd="$OPTARG"
            ;;
        h)
            usage
            exit 0
            ;;
        a)
            args="$OPTARG"
            ;;
        d)
            install_dir="$OPTARG"
            ;;
        D)
            logdir="$OPTARG"
            ;;
        f)
            logfile="$OPTARG"
            ;;
        l)
            Moca_log="$OPTARG"
            ;;
        L)
            log_thread_interval=$OPTARG
            ;;
        w)
            moca_interval="Moca_wakeupInterval=$OPTARG"
            ;;
        p)
            prio=$OPTARG
            moca_prio="Moca_schedulerPriority=$OPTARG"
            which schedtool > /dev/null
            if [ $? -ne 0 ]
            then
                echo "$0 requires the schedtool to set the priority."
                echo "Please install schedtool or update your PATH"
                exit 1
            fi
            ;;
        b)
            moca_bits="Moca_taskDataHashBits=$OPTARG"
            ;;
        S)
            moca_factor="Moca_taskDataChunkSize=$OPTARG"
            ;;
        C)
            moca_chunks="Moca_nbChunks=$OPTARG"
            ;;
        n)
            compi=false;
            ;;
        H)
            Moca_false_pf="Moca_use_false_pf=1"
            Moca_ugly="Moca_false_pf_ugly=1"
            ;;
        F)
            Moca_false_pf="Moca_use_false_pf=0"
            ;;
        G)
            framesoc=false
            ;;
        P)
            pin=false
            ;;
        *)
            usage
            exit 1
            ;;
    esac
done

if [ $(whoami) != "root"  ]
then
    echo "$0 must be run as root"
    exit 1
fi

if [ -z "$cmd" ]
then
    echo "A command is required"
    usage
    exit 1
fi
program=$(basename $cmd)

if [ -z "$logdir" ]
then
    logdir="$(pwd)/Moca-$program-$(date +%Y-%m-%d_%H-%M-%S)"
fi


mkdir $logdir

if [ -z "$logfile" ]
then
    logfile="$logdir/Moca-$program.log"
fi
kernLogFile="$logdir/$kernLogFile"

panic()
{
    # Give some time to MOCA for removing probes
    sleep 5
    # Kill subprocesses
    kill -TERM  -- -$(pgrep -o $(basename $0))
    # Flush all data
    cat $procdir/* > /dev/null 2>&1
    # Exit
    exit 1
}

child()
{
    trap panic SIGINT
    # Wait for the kernel module to start
    kill -s SIGSTOP $BASHPID
    if [ -z "$logfile" ]
    then
        $cmd $args
    else
        if $pin
        then
            pincmd="pin -xyzzy -enable_vsm 0 -t $pintooldir/obj-*/*.so -o $logdir --"
        else
            pincmd=""
        fi
        $pincmd $cmd $args > $logfile 2> $logfile.err
    fi
    ret=$?
    echo "$program ended code $ret"
    exit $ret
}
log()
{
    while test -e $procdir
    do
        for f in $(\ls $procdir)
        do
            cat $procdir/$f >> $kernLogFile-$f.log
        done
        sleep $log_thread_interval
    done
}

abort_on_error()
{
    if [ $1 -ne 0 ]
    then
        kill -9 $pid
        echo "Fatal error: $2"
        echo "aborting"
        exit 1
    fi
}
child &
pid=$!

if [ ! -z $prio ]
then
    let user_prio=$(( $prio - 1 ))
    schedtool -F -p $prio $$
    schedtool -F -p $user_prio $pid
fi
if $compi
then
    cd $install_dir/src/
    if $pin
    then
        target=""
    else
        target="module/moca.ko"
    fi
    echo "$PWD make $target"
    make $target
    abort_on_error $? "make fail"
fi
insmod $install_dir/src/module/moca.ko Moca_mainPid=$pid $moca_interval $moca_bits $moca_factor \
    $Moca_false_pf $Moca_ugly $moca_chunks $moca_prio
abort_on_error $? "unable to load module"
cd -
log &
logpid=$!
if [ ! -z $prio ]
then
    schedtool -F -p $prio $logpid
fi
t=$(timer)
echo "Moca correctly loaded, executing: \"$cmd $args\""
kill -s SIGCONT $pid
wait $pid
echo "done in $(timer $t)"
t=$(timer)
echo "Unloading Moca module"
rmmod moca
echo "done in $(timer $t)"
t=$(timer)
echo "Retrieving Moca log"
# Create the log
line=$(grep -n "Moca started" /var/log/kern.log | tail -n 1 | cut -d ':' -f 1)
line=$(($line-1))
line+='d'
sed 1,$line /var/log/kern.log | grep -i "moca" > $logdir/$Moca_log
echo "File $logdir/$Moca_log created with Moca output in $(timer $t)"
pgsize=$(head -n 1 $kernLogFile-task0.log  | cut -d ' ' -f 4)
if $framesoc
then
    # Create the event poducers log (required by framesoc)
    echo "Creating files for Framesoc"
    cd $logdir
    $install_dir/src/utils/create_event_producer.pl $pgsize $kernLogFile-task*
    echo -e "\tdone in $(timer $t)"
    cd -
else
    echo "Not create framesoc files as requested"
    echo "You can generate them later by running:"
    echo "cd $logdir; $install_dir/src/utils/create_event_producer.pl $pgsize $kernLogFile-task*"
fi
echo -e "Moca analysis done\nTotal time: $(timer $initime)\nLog directory: $logdir\nBye!"
